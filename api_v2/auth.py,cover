> """
> Routes for user authentication
> """
> import urllib.parse
> from flask import jsonify, abort, current_app
> from flask_restful import Resource, reqparse
> import psycopg2
> from werkzeug.security import generate_password_hash, check_password_hash
> import datetime
> from datetime import timedelta
> import jwt
  
> parser = reqparse.RequestParser()
  
> result = urllib.parse.urlparse("postgresql://testuser:testuser@localhost/testdb")
> username = result.username
> database = result.path[1:]
> hostname = result.hostname
> dbpassword = result.password
  
> def get_user(email):
>     """
>     Helper method to check if user exists in database
>     """
>     conn = psycopg2.connect(database=database, user=username,
>                             password=dbpassword, host=hostname)
  
>     cur = conn.cursor()
  
>     cur.execute("select * from users where email=%(email)s",{'email':email})
  
>     rows = cur.fetchone()
  
>     if rows:
>         return True
  
> def encode_token(email, firstname):
>     """
>     encode token to be sent to user
>     """
>     payload = {
>         'email': email,
>         'firstname': firstname
>     }
  
>     token = jwt.encode(payload, current_app.config['SECRET_KEY'], algorithm='HS256')
  
>     return token
  
> class Signup(Resource):
>     def post(self):
>         """
>         signup for an account
>         """
>         conn = None
>         parser.add_argument('first_name', type=str, help="user's firstname")
>         parser.add_argument('last_name', type=str, help="user's lastname")
>         parser.add_argument('email', type=str, help="user's email")
>         parser.add_argument('password', type=str, help="password")
>         args = parser.parse_args()
  
>         firstname = args['first_name']
>         lastname = args['last_name']
>         email = args['email']
>         password = args['password']
  
>         password_hash = generate_password_hash(password)
  
>         data = [firstname, lastname, email, password_hash]
  
>         if not get_user(email):
  
>             try:
  
>                 sql = """INSERT INTO users (first_name, last_name, email, password)
>                             VALUES(%s, %s, %s, %s)"""
  
>                 conn = psycopg2.connect(database=database, user=username,
>                                         password=dbpassword, host=hostname)
  
>                 cur = conn.cursor()
  
>                 cur.execute(sql, data)
  
>                 cur.close()
  
>                 conn.commit()
  
>                 conn.close()
  
>                 access_token = encode_token(email, firstname)
  
>                 return {'success': 'user account created',
>                         'access_token': access_token.decode('UTF-8')}, 201
              
!             except(Exception , psycopg2.DatabaseError) as Error:
!                 return {'error': str(Error)}, 500
                      
  
!         else:
!             return {'error': 'user already exists'}, 400
  
         
> class Login(Resource):
>     def post(self):
>         """
>         login into  account
>         """
>         conn = None
>         parser.add_argument('email', type=str, help='users email')
>         parser.add_argument('password', type=str, help='password')
>         args = parser.parse_args()
  
>         email = args['email']
>         password = args['password']
  
>         if get_user(email):
>             try:
>                 conn = psycopg2.connect(database=database, user=username,
>                                             password=dbpassword, host=hostname)
  
>                 cur = conn.cursor()
  
>                 cur.execute("SELECT first_name, password FROM users WHERE email=%(email)s",
>                             {'email':email})
  
>                 rows = cur.fetchone()
  
>                 if not rows:
!                     return {'error': 'who are you?'}
  
>                 firstname = rows[0]
>                 stored_password = rows[1]
  
              
>                 if check_password_hash(stored_password, password):
>                     access_token = encode_token(email, firstname)
  
>                     return {"success":"login successful",
>                             "access_token": access_token.decode('UTF-8'),} 
  
!                 return {'its me': 'DERRICK'}
  
!             except(Exception , psycopg2.DatabaseError) as Error:
  
!                 return jsonify({'error': str(Error)})
  
>         return {'error':'wrong credentials'}, 400
